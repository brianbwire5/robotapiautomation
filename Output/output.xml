<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1.1 (Python 3.12.1 on win32)" generated="20240116 11:46:19.452" rpa="false" schemaversion="4">
<suite id="s1" name="API Demo" source="C:\Users\KEN203364\PycharmProjects\RobotFramework\Api_Tests\API_Demo.robot">
<test id="s1-t1" name="Quick GET Request Test" line="16">
<kw name="GET" library="RequestsLibrary">
<var>${response}</var>
<arg>${base_url}</arg>
<arg>params=page=${page_id}</arg>
<arg>expected_status=200</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20240116 11:46:19.538" level="TRACE">Arguments: [ 'https://reqres.in/api/users' | params='page=2' | expected_status='200' ]</msg>
<msg timestamp="20240116 11:46:19.540" level="DEBUG">Starting new HTTPS connection (1): reqres.in:443</msg>
<msg timestamp="20240116 11:46:57.571" level="DEBUG">https://reqres.in:443 "GET /api/users?page=2 HTTP/1.1" 200 None</msg>
<msg timestamp="20240116 11:46:57.572" level="INFO">GET Request : url=https://reqres.in/api/users?page=2 
 path_url=/api/users?page=2 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20240116 11:46:57.572" level="INFO">GET Response : url=https://reqres.in/api/users?page=2 
 status=200, reason=OK 
 headers={'Date': 'Tue, 16 Jan 2024 08:46:57 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Report-To': '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1705333516&amp;sid=c4c9725f-1ab0-44d8-820f-430df2718e11&amp;s=Z%2BAsT17M3vuusYnXRfZ33KFjV1ErZmr5sXlSRPvBUe0%3D"}]}', 'Reporting-Endpoints': 'heroku-nel=https://nel.heroku.com/reports?ts=1705333516&amp;sid=c4c9725f-1ab0-44d8-820f-430df2718e11&amp;s=Z%2BAsT17M3vuusYnXRfZ33KFjV1ErZmr5sXlSRPvBUe0%3D', 'Nel': '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}', 'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Etag': 'W/"406-ut0vzoCuidvyMf8arZpMpJ6ZRDw"', 'Via': '1.1 vegur', 'Cache-Control': 'max-age=14400', 'CF-Cache-Status': 'HIT', 'Age': '3435', 'Vary': 'Accept-Encoding', 'Server': 'cloudflare', 'CF-RAY': '84651748dec4d377-CDG', 'Content-Encoding': 'gzip'} 
 body={"page":2,"per_page":6,"total":12,"total_pages":2,"data":[{"id":7,"email":"michael.lawson@reqres.in","first_name":"Michael","last_name":"Lawson","avatar":"https://reqres.in/img/faces/7-image.jpg"},{"id":8,"email":"lindsay.ferguson@reqres.in","first_name":"Lindsay","last_name":"Ferguson","avatar":"https://reqres.in/img/faces/8-image.jpg"},{"id":9,"email":"tobias.funke@reqres.in","first_name":"Tobias","last_name":"Funke","avatar":"https://reqres.in/img/faces/9-image.jpg"},{"id":10,"email":"byron.fields@reqres.in","first_name":"Byron","last_name":"Fields","avatar":"https://reqres.in/img/faces/10-image.jpg"},{"id":11,"email":"george.edwards@reqres.in","first_name":"George","last_name":"Edwards","avatar":"https://reqres.in/img/faces/11-image.jpg"},{"id":12,"email":"rachel.howell@reqres.in","first_name":"Rachel","last_name":"Howell","avatar":"https://reqres.in/img/faces/12-image.jpg"}],"support":{"url":"https://reqres.in/#support-heading","text":"To keep ReqRes free, contributions towards server costs are appreciated!"}} 
 </msg>
<msg timestamp="20240116 11:46:57.572" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20240116 11:46:57.572" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20240116 11:46:19.538" endtime="20240116 11:46:57.572"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240116 11:46:57.573" level="TRACE">Arguments: [ {'data': [{'avatar': 'https://reqres.in/img/faces/7-image.jpg',
           'email': 'michael.lawson@reqres.in',
           'first_name': 'Michael',
           'id': 7,
           'last_name': 'Lawson'},
          {'avatar': 'https://reqres.in/img/faces/8-image.jpg',
           'email': 'lindsay.ferguson@reqres.in',
           'first_name': 'Lindsay',
           'id': 8,
           'last_name': 'Ferguson'},
          {'avatar': 'https://reqres.in/img/faces/9-image.jpg',
           'email': 'tobias.funke@reqres.in',
           'first_name': 'Tobias',
           'id': 9,
           'last_name': 'Funke'},
          {'avatar': 'https://reqres.in/img/faces/10-image.jpg',
           'email': 'byron.fields@reqres.in',
           'first_name': 'Byron',
           'id': 10,
           'last_name': 'Fields'},
          {'avatar': 'https://reqres.in/img/faces/11-image.jpg',
           'email': 'george.edwards@reqres.in',
           'first_name': 'George',
           'id': 11,
           'last_name': 'Edwards'},
          {'avatar': 'https://reqres.in/img/faces/12-image.jpg',
           'email': 'rachel.howell@reqres.in',
           'first_name': 'Rachel',
           'id': 12,
           'last_name': 'Howell'}],
 'page': 2,
 'per_page': 6,
 'support': {'text': 'To keep ReqRes free, contributions towards server costs are appreciated!',
             'url': 'https://reqres.in/#support-heading'},
 'total': 12,
 'total_pages': 2} ]</msg>
<msg timestamp="20240116 11:46:57.573" level="INFO">{'page': 2, 'per_page': 6, 'total': 12, 'total_pages': 2, 'data': [{'id': 7, 'email': 'michael.lawson@reqres.in', 'first_name': 'Michael', 'last_name': 'Lawson', 'avatar': 'https://reqres.in/img/faces/7-image.jpg'}, {'id': 8, 'email': 'lindsay.ferguson@reqres.in', 'first_name': 'Lindsay', 'last_name': 'Ferguson', 'avatar': 'https://reqres.in/img/faces/8-image.jpg'}, {'id': 9, 'email': 'tobias.funke@reqres.in', 'first_name': 'Tobias', 'last_name': 'Funke', 'avatar': 'https://reqres.in/img/faces/9-image.jpg'}, {'id': 10, 'email': 'byron.fields@reqres.in', 'first_name': 'Byron', 'last_name': 'Fields', 'avatar': 'https://reqres.in/img/faces/10-image.jpg'}, {'id': 11, 'email': 'george.edwards@reqres.in', 'first_name': 'George', 'last_name': 'Edwards', 'avatar': 'https://reqres.in/img/faces/11-image.jpg'}, {'id': 12, 'email': 'rachel.howell@reqres.in', 'first_name': 'Rachel', 'last_name': 'Howell', 'avatar': 'https://reqres.in/img/faces/12-image.jpg'}], 'support': {'url': 'https://reqres.in/#support-heading', 'text': 'To keep ReqRes free, contributions towards server costs are appreciated!'}}</msg>
<msg timestamp="20240116 11:46:57.573" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240116 11:46:57.573" endtime="20240116 11:46:57.574"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>6</arg>
<arg>${response.json()}[per_page]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20240116 11:46:57.574" level="TRACE">Arguments: [ '6' | 6 ]</msg>
<msg timestamp="20240116 11:46:57.574" level="INFO">Argument types are:
&lt;class 'str'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20240116 11:46:57.574" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240116 11:46:57.574" endtime="20240116 11:46:57.574"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>12</arg>
<arg>${response.json()}[total]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20240116 11:46:57.575" level="TRACE">Arguments: [ '12' | 12 ]</msg>
<msg timestamp="20240116 11:46:57.575" level="INFO">Argument types are:
&lt;class 'str'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20240116 11:46:57.575" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240116 11:46:57.574" endtime="20240116 11:46:57.575"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>7</arg>
<arg>${response.json()}[data][0][id]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20240116 11:46:57.575" level="TRACE">Arguments: [ '7' | 7 ]</msg>
<msg timestamp="20240116 11:46:57.575" level="INFO">Argument types are:
&lt;class 'str'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20240116 11:46:57.575" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240116 11:46:57.575" endtime="20240116 11:46:57.575"/>
</kw>
<status status="PASS" starttime="20240116 11:46:19.537" endtime="20240116 11:46:57.575"/>
</test>
<test id="s1-t2" name="Quick POST Request Test" line="22">
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{req_body}</var>
<arg>name=brian</arg>
<arg>job=software developer</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20240116 11:46:57.576" level="TRACE">Arguments: [ 'name=brian' | 'job=software developer' ]</msg>
<msg timestamp="20240116 11:46:57.576" level="TRACE">Return: {'job': 'software developer', 'name': 'brian'}</msg>
<msg timestamp="20240116 11:46:57.576" level="INFO">&amp;{req_body} = { name=brian | job=software developer }</msg>
<status status="PASS" starttime="20240116 11:46:57.576" endtime="20240116 11:46:57.576"/>
</kw>
<kw name="POST" library="RequestsLibrary">
<var>${response}</var>
<arg>${base_url}</arg>
<arg>json=${req_body}</arg>
<arg>expected_status=201</arg>
<doc>Sends a POST request.</doc>
<msg timestamp="20240116 11:46:57.576" level="TRACE">Arguments: [ 'https://reqres.in/api/users' | json={'job': 'software developer', 'name': 'brian'} | expected_status='201' ]</msg>
<msg timestamp="20240116 11:46:57.577" level="DEBUG">Starting new HTTPS connection (1): reqres.in:443</msg>
<msg timestamp="20240116 11:46:58.904" level="DEBUG">https://reqres.in:443 "POST /api/users HTTP/1.1" 201 93</msg>
<msg timestamp="20240116 11:46:58.905" level="INFO">POST Request : url=https://reqres.in/api/users 
 path_url=/api/users 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '46', 'Content-Type': 'application/json'} 
 body=b'{"name": "brian", "job": "software developer"}' 
 </msg>
<msg timestamp="20240116 11:46:58.905" level="INFO">POST Response : url=https://reqres.in/api/users 
 status=201, reason=Created 
 headers={'Date': 'Tue, 16 Jan 2024 08:46:58 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '93', 'Connection': 'keep-alive', 'Report-To': '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1705394818&amp;sid=c4c9725f-1ab0-44d8-820f-430df2718e11&amp;s=KAjEByz57iL7df%2FqQ0zqSuvj0A38Ca0Jr9pvOjOiZzw%3D"}]}', 'Reporting-Endpoints': 'heroku-nel=https://nel.heroku.com/reports?ts=1705394818&amp;sid=c4c9725f-1ab0-44d8-820f-430df2718e11&amp;s=KAjEByz57iL7df%2FqQ0zqSuvj0A38Ca0Jr9pvOjOiZzw%3D', 'Nel': '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}', 'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Etag': 'W/"5d-dKYHHWG2lmpOANNkb8Fw+K3DSOE"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'DYNAMIC', 'Server': 'cloudflare', 'CF-RAY': '84651750e9192a68-CDG'} 
 body={"name":"brian","job":"software developer","id":"957","createdAt":"2024-01-16T08:46:58.755Z"} 
 </msg>
<msg timestamp="20240116 11:46:58.905" level="TRACE">Return: &lt;Response [201]&gt;</msg>
<msg timestamp="20240116 11:46:58.905" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20240116 11:46:57.576" endtime="20240116 11:46:58.905"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240116 11:46:58.906" level="TRACE">Arguments: [ {'createdAt': '2024-01-16T08:46:58.755Z',
 'id': '957',
 'job': 'software developer',
 'name': 'brian'} ]</msg>
<msg timestamp="20240116 11:46:58.906" level="INFO">{'name': 'brian', 'job': 'software developer', 'id': '957', 'createdAt': '2024-01-16T08:46:58.755Z'}</msg>
<msg timestamp="20240116 11:46:58.906" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240116 11:46:58.905" endtime="20240116 11:46:58.906"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${response.json()}</arg>
<arg>id</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20240116 11:46:58.907" level="TRACE">Arguments: [ {'createdAt': '2024-01-16T08:46:58.755Z',
 'id': '957',
 'job': 'software developer',
 'name': 'brian'} | 'id' ]</msg>
<msg timestamp="20240116 11:46:58.907" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240116 11:46:58.907" endtime="20240116 11:46:58.907"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${name}</var>
<arg>${response.json()}</arg>
<arg>name</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20240116 11:46:58.908" level="TRACE">Arguments: [ {'createdAt': '2024-01-16T08:46:58.755Z',
 'id': '957',
 'job': 'software developer',
 'name': 'brian'} | 'name' ]</msg>
<msg timestamp="20240116 11:46:58.908" level="TRACE">Return: 'brian'</msg>
<msg timestamp="20240116 11:46:58.908" level="INFO">${name} = brian</msg>
<status status="PASS" starttime="20240116 11:46:58.907" endtime="20240116 11:46:58.908"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expectedname}</arg>
<arg>${name}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20240116 11:46:58.908" level="TRACE">Arguments: [ 'brian' | 'brian' ]</msg>
<msg timestamp="20240116 11:46:58.908" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20240116 11:46:58.909" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240116 11:46:58.908" endtime="20240116 11:46:58.909"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${job}</var>
<arg>${response.json()}</arg>
<arg>job</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20240116 11:46:58.909" level="TRACE">Arguments: [ {'createdAt': '2024-01-16T08:46:58.755Z',
 'id': '957',
 'job': 'software developer',
 'name': 'brian'} | 'job' ]</msg>
<msg timestamp="20240116 11:46:58.909" level="TRACE">Return: 'software developer'</msg>
<msg timestamp="20240116 11:46:58.909" level="INFO">${job} = software developer</msg>
<status status="PASS" starttime="20240116 11:46:58.909" endtime="20240116 11:46:58.909"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expectedjob}</arg>
<arg>${job}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20240116 11:46:58.910" level="TRACE">Arguments: [ 'software developer' | 'software developer' ]</msg>
<msg timestamp="20240116 11:46:58.910" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20240116 11:46:58.910" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240116 11:46:58.910" endtime="20240116 11:46:58.910"/>
</kw>
<status status="PASS" starttime="20240116 11:46:57.576" endtime="20240116 11:46:58.910"/>
</test>
<test id="s1-t3" name="Quick PUT Request Test" line="32">
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{req_body}</var>
<arg>name=update_test</arg>
<arg>job=resident</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20240116 11:46:58.912" level="TRACE">Arguments: [ 'name=update_test' | 'job=resident' ]</msg>
<msg timestamp="20240116 11:46:58.912" level="TRACE">Return: {'job': 'resident', 'name': 'update_test'}</msg>
<msg timestamp="20240116 11:46:58.913" level="INFO">&amp;{req_body} = { name=update_test | job=resident }</msg>
<status status="PASS" starttime="20240116 11:46:58.912" endtime="20240116 11:46:58.913"/>
</kw>
<kw name="PUT" library="RequestsLibrary">
<var>${response}</var>
<arg>${base_url}+/2</arg>
<arg>json=${req_body}</arg>
<arg>expected_status=200</arg>
<doc>Sends a PUT request.</doc>
<msg timestamp="20240116 11:46:58.913" level="TRACE">Arguments: [ 'https://reqres.in/api/users+/2' | json={'job': 'resident', 'name': 'update_test'} | expected_status='200' ]</msg>
<msg timestamp="20240116 11:46:58.915" level="DEBUG">Starting new HTTPS connection (1): reqres.in:443</msg>
<msg timestamp="20240116 11:46:59.943" level="DEBUG">https://reqres.in:443 "PUT /api/users+/2 HTTP/1.1" 200 None</msg>
<msg timestamp="20240116 11:46:59.944" level="INFO">PUT Request : url=https://reqres.in/api/users+/2 
 path_url=/api/users+/2 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '42', 'Content-Type': 'application/json'} 
 body=b'{"name": "update_test", "job": "resident"}' 
 </msg>
<msg timestamp="20240116 11:46:59.945" level="INFO">PUT Response : url=https://reqres.in/api/users+/2 
 status=200, reason=OK 
 headers={'Date': 'Tue, 16 Jan 2024 08:46:59 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Report-To': '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1705394819&amp;sid=c4c9725f-1ab0-44d8-820f-430df2718e11&amp;s=ZN7q%2Bz4cMkU%2FyBg8S%2FdAV9z5gfnU5flKyzOQzbmRELU%3D"}]}', 'Reporting-Endpoints': 'heroku-nel=https://nel.heroku.com/reports?ts=1705394819&amp;sid=c4c9725f-1ab0-44d8-820f-430df2718e11&amp;s=ZN7q%2Bz4cMkU%2FyBg8S%2FdAV9z5gfnU5flKyzOQzbmRELU%3D', 'Nel': '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}', 'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Etag': 'W/"4e-XWiVnHZvaaUAGVFow47MFyR6SQk"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'DYNAMIC', 'Vary': 'Accept-Encoding', 'Server': 'cloudflare', 'CF-RAY': '846517577eec0490-CDG', 'Content-Encoding': 'gzip'} 
 body={"name":"update_test","job":"resident","updatedAt":"2024-01-16T08:46:59.796Z"} 
 </msg>
<msg timestamp="20240116 11:46:59.945" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20240116 11:46:59.945" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20240116 11:46:58.913" endtime="20240116 11:46:59.945"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240116 11:46:59.961" level="TRACE">Arguments: [ {'job': 'resident',
 'name': 'update_test',
 'updatedAt': '2024-01-16T08:46:59.796Z'} ]</msg>
<msg timestamp="20240116 11:46:59.962" level="INFO">{'name': 'update_test', 'job': 'resident', 'updatedAt': '2024-01-16T08:46:59.796Z'}</msg>
<msg timestamp="20240116 11:46:59.962" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240116 11:46:59.961" endtime="20240116 11:46:59.962"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${response.json()}</arg>
<arg>name</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20240116 11:46:59.964" level="TRACE">Arguments: [ {'job': 'resident',
 'name': 'update_test',
 'updatedAt': '2024-01-16T08:46:59.796Z'} | 'name' ]</msg>
<msg timestamp="20240116 11:46:59.965" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240116 11:46:59.964" endtime="20240116 11:46:59.965"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${name}</var>
<arg>${response.json()}</arg>
<arg>name</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20240116 11:46:59.966" level="TRACE">Arguments: [ {'job': 'resident',
 'name': 'update_test',
 'updatedAt': '2024-01-16T08:46:59.796Z'} | 'name' ]</msg>
<msg timestamp="20240116 11:46:59.966" level="TRACE">Return: 'update_test'</msg>
<msg timestamp="20240116 11:46:59.966" level="INFO">${name} = update_test</msg>
<status status="PASS" starttime="20240116 11:46:59.966" endtime="20240116 11:46:59.966"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${updated_expectedname}</arg>
<arg>${name}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20240116 11:46:59.971" level="TRACE">Arguments: [ 'update_test' | 'update_test' ]</msg>
<msg timestamp="20240116 11:46:59.971" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20240116 11:46:59.971" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240116 11:46:59.970" endtime="20240116 11:46:59.971"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${response.json()}</arg>
<arg>job</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20240116 11:46:59.972" level="TRACE">Arguments: [ {'job': 'resident',
 'name': 'update_test',
 'updatedAt': '2024-01-16T08:46:59.796Z'} | 'job' ]</msg>
<msg timestamp="20240116 11:46:59.972" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240116 11:46:59.972" endtime="20240116 11:46:59.972"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${job}</var>
<arg>${response.json()}</arg>
<arg>job</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20240116 11:46:59.973" level="TRACE">Arguments: [ {'job': 'resident',
 'name': 'update_test',
 'updatedAt': '2024-01-16T08:46:59.796Z'} | 'job' ]</msg>
<msg timestamp="20240116 11:46:59.973" level="TRACE">Return: 'resident'</msg>
<msg timestamp="20240116 11:46:59.973" level="INFO">${job} = resident</msg>
<status status="PASS" starttime="20240116 11:46:59.973" endtime="20240116 11:46:59.973"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${updated_expectedjob}</arg>
<arg>${job}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20240116 11:46:59.974" level="TRACE">Arguments: [ 'resident' | 'resident' ]</msg>
<msg timestamp="20240116 11:46:59.974" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20240116 11:46:59.974" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240116 11:46:59.973" endtime="20240116 11:46:59.974"/>
</kw>
<status status="PASS" starttime="20240116 11:46:58.912" endtime="20240116 11:46:59.974"/>
</test>
<test id="s1-t4" name="Quick DELETE Request Test" line="44">
<kw name="DELETE" library="RequestsLibrary">
<var>${delete_resp}</var>
<arg>${base_url}+/2</arg>
<arg>expected_status=204</arg>
<doc>Sends a DELETE request.</doc>
<msg timestamp="20240116 11:46:59.975" level="TRACE">Arguments: [ 'https://reqres.in/api/users+/2' | expected_status='204' ]</msg>
<msg timestamp="20240116 11:46:59.976" level="DEBUG">Starting new HTTPS connection (1): reqres.in:443</msg>
<msg timestamp="20240116 11:47:01.017" level="DEBUG">https://reqres.in:443 "DELETE /api/users+/2 HTTP/1.1" 204 0</msg>
<msg timestamp="20240116 11:47:01.026" level="INFO">DELETE Request : url=https://reqres.in/api/users+/2 
 path_url=/api/users+/2 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20240116 11:47:01.026" level="INFO">DELETE Response : url=https://reqres.in/api/users+/2 
 status=204, reason=No Content 
 headers={'Date': 'Tue, 16 Jan 2024 08:47:00 GMT', 'Content-Length': '0', 'Connection': 'keep-alive', 'Report-To': '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1705394820&amp;sid=c4c9725f-1ab0-44d8-820f-430df2718e11&amp;s=ds8dGM7YUhaG0%2F5To0ioT%2BHuqKZS%2FWJNYWkEZXuhvPE%3D"}]}', 'Reporting-Endpoints': 'heroku-nel=https://nel.heroku.com/reports?ts=1705394820&amp;sid=c4c9725f-1ab0-44d8-820f-430df2718e11&amp;s=ds8dGM7YUhaG0%2F5To0ioT%2BHuqKZS%2FWJNYWkEZXuhvPE%3D', 'Nel': '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}', 'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Etag': 'W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'DYNAMIC', 'Server': 'cloudflare', 'CF-RAY': '8465175e1964229d-CDG'} 
 body=None 
 </msg>
<msg timestamp="20240116 11:47:01.026" level="TRACE">Return: &lt;Response [204]&gt;</msg>
<msg timestamp="20240116 11:47:01.026" level="INFO">${delete_resp} = &lt;Response [204]&gt;</msg>
<status status="PASS" starttime="20240116 11:46:59.975" endtime="20240116 11:47:01.026"/>
</kw>
<status status="PASS" starttime="20240116 11:46:59.974" endtime="20240116 11:47:01.027"/>
</test>
<status status="PASS" starttime="20240116 11:46:19.453" endtime="20240116 11:47:01.028"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="API Demo">API Demo</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
